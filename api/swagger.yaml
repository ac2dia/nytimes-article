openapi: 3.0.0
info:
  title: Article
  description: |
    This is a simple API Server based DDD
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://localhost:8000
    description: SwaggerHub API Auto Mocking
tags:
  - name: article
    description: Everything about article
  - name: user
    description: Everything about user
paths:
  /article:
    get:
      tags:
        - article
      summary: Get Articles
      operationId: getArticles
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/requestBodies/Articles'
                x-content-type: application/json
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/requestBodies/Articles'
        "400":
          description: Invalid status value
    post:
      tags:
        - article
      summary: Add a new article
      operationId: addArticle
      requestBody:
        $ref: '#/components/requestBodies/Article'
      responses:
        "405":
          description: Invalid input
  /article/{id}:
    get:
      tags:
        - article
      summary: Get Article
      operationId: getArticle
      parameters:
        - name: id
          in: path
          description: The Article Id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Article'
            application/xml:
              schema:
                $ref: '#/components/schemas/Article'
        "400":
          description: Invalid Article Id
    put:
      tags:
        - article
      summary: Updated Article
      description: This can only be done by the logged in user.
      operationId: updateArticle
      parameters:
        - name: id
          in: path
          description: The Article Id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      requestBody:
        description: Updated article object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Article'
        required: true
      responses:
        "400":
          description: Invalid Article Id
        "404":
          description: Article not found
    delete:
      tags:
        - article
      summary: Delete Article
      operationId: deleteArticle
      parameters:
        - name: id
          in: path
          description: The Article Id
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "400":
          description: Invalid Article Id
        "404":
          description: Article not found
  /user:
    get:
      tags:
        - user
      summary: Get users
      operationId: getUsers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
                x-content-type: application/json
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: The name that needs to be fetched. Use user1 for testing.
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be updated
          required: true
          style: simple
          explode: false
          schema:
            type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Article:
      type: object
      properties:
        id:
          type: integer
          format: int64
        title:
          type: string
        content:
          type: string
          format: byte
        username:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        id: 0
        title: title
        content: ""
        username: username
        updatedAt: 2000-01-23T04:56:07.000+00:00
      xml:
        name: Order
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
      example:
        password: password
        phone: phone
        id: 0
        email: email
        username: username
  requestBodies:
    Article:
      description: article object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Article'
      required: true
    Articles:
      description: article list object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/Article'
      required: true
    User:
      description: user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
    Users:
      description: user list object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
